// Magma code accompanying the paper "Prime numbers and dynamics of the polynomial xÂ²-1"
// by Ivan Penkov and Michael Stoll

// Q: Let n be a positive integer, not of the form n = m^2 - 1.
// Consider the sequence (a_k) with a_0 = n, a_{k+1} = a_k^2 - 1.
// Let P(n) be the set of all prime divisors of all a_k.
// Is n determined uniquely by P(n) ?
// (Question asked by Ivan Penkov, 2023-06-21, in Dubrovnik)

// Equivalently:
// For a prime p, let S(p) be the subset of \F_p consisting of
// all a such that iterating x^2-1 on a eventually hits 0.
// Q: For each subset T of the set of all primes,
// is #({n : n /= m^2-1} \cap \bigcap_{p \in T} S(p)
//       \cap \bigcap_{p \notin T} (\Z - S(p))) \le 1 ?
// (Identifying S(p) with its preimage in \Z.)

// This seems likely, but very difficult to prove.

// Determine the backwards orbit of zero in F_p
function set_mod_p(p)
  // p : a prime number
  F := GF(p);
  if p eq 2 then return Set(F); end if;
  function help(x)
    flag, y := IsSquare(x + 1);
    if flag then
      return {x} join help(y) join help(-y);
    else
      return {x};
    end if;
  end function;
  return {F | -1, 0} join help(F!1);
end function;

// Verify Lemma 1.3
time assert {p : p in PrimesUpTo(10^5) | #set_mod_p(p) eq p} eq {2, 3, 7, 23, 19207};

// Precomputation for primes up to 10000
time smps := [*<p, set_mod_p(p)> : p in PrimesInInterval(5, 10000)*];
smss := [Abs(1/2 - #e[2]/e[1]) : e in smps];
Sort(~smss, ~perm);
smps := smps[[1..#smps]^perm];

// Given a sequence of sets of natural numbers, split them according
// to the information at the prime p.
// Remove (empty sets and) singleton sets, since they cannot be split further.
function split(s, p : smp := set_mod_p(p))
  if #smp eq p then return s; end if; // no splitting possible
  result := [Universe(s)| ];
  for a in s do
    a1 := {n : n in a | GF(p)!n in smp};
    a2 := a diff a1;
    // remove empty and one-element sets
    if #a1 ge 2 then Append(~result, a1); end if;
    if #a2 ge 2 then Append(~result, a2); end if;
  end for;
  return result;
end function;

// Theorem 3.2:
// Verify that the numbers from 2 to max not of the form n^2-1
// can be separated by comparing the set of prime divisors of their iterates.
procedure test(max)
  tb := Cputime();
  sn := [{2..max} diff {n^2-1 : n in {2..Isqrt(max+1)}}];
  p := 3;
  repeat
    p := NextPrime(p);
    printf "p = %o -->", p;
    t0 := Cputime();
    sn := split(sn, p);
    t := Cputime(t0);
    m := Max([0] cat [#a : a in sn]);
    printf " %o sets, max size = %o (time: %o s)\n", #sn, m, t;
  until IsEmpty(sn);
  t := Cputime(tb);
  printf "\nVerified for %o; total time: %o s\n", max, t;
end procedure;

// numbers up to 10^1 can be separated by primes up to 47
// numbers up to 10^2 can be separated by primes up to 223
// numbers up to 10^3 can be separated by primes up to 379
// numbers up to 10^4 can be separated by primes up to 919
// numbers up to 10^5 can be separated by primes up to 2137
// numbers up to 10^6 can be separated by primes up to 3001
// numbers up to 10^7 can be separated by primes up to 4793
// numbers up to 10^8 can be separated by primes up to 5791

// numerically consistent with primes up to ~ (log N)^2 for numbers up to N

// Theorem 3.3:
// Use the more efficient procedure, which takes the "best" primes first.
function test_new(max)
  tb := Cputime();
  sn := [{2..max} diff {n^2-1 : n in {2..Isqrt(max+1)}}];
  for e in smps do
    p, smp := Explode(e);
    printf "p = %o -->", p;
    t0 := Cputime();
    sn := split(sn, p : smp := smp);
    t := Cputime(t0);
    m := Max([0] cat [#a : a in sn]);
    printf " %o sets, max size = %o (time: %o s)\n", #sn, m, t;
    if IsEmpty(sn) then
      t := Cputime(tb);
      printf "\nVerified for %o; total time: %o s\n", max, t;
      return true, [];
    end if;
  end for;
  t := Cputime(tb);
  printf "\nTest for %o: %o sets remain; total time: %o s\n", max, #sn, t;
  return false, sn;
end function;

// Depth-first variant
function test_dfs(max)
  m1 := max div 100;
  function help(i, s)
    // deal with set s, using primes from index i in smps
    if i gt #smps then return false, [s]; end if;
    if #s gt m1 then
      printf "-"^(i-1)*" #s = %o\n", #s;
    end if;
    p, smp := Explode(smps[i]);
    s1 := {n : n in s | GF(p)!n in smp};
    s2 := s diff s1;
    if #s1 ge 2 then
      fl1, s1 := help(i+1, s1);
    else
      fl1 := true; s1 := [];
    end if;
    if #s2 ge 2 then
      fl2, s2 := help(i+1, s2);
    else
      fl2 := true; s2 := [];
    end if;
    return fl1 and fl2, s1 cat s2;
  end function;
  tb := Cputime();
  flag, rem := help(1, {2..max} diff {n^2-1 : n in {2..Isqrt(max+1)}});
  t := Cputime(tb);
  if flag then
    printf "\nVerified for %o; total time: %o s\n", max, t;
    return true, [];
  else
    printf "\nTest for %o: %o sets remain; total time: %o s\n", max, #rem, t;
    return false, rem;
  end if;
end function;

// Verified for N = 2^29 with primes < 10^4
